-- EX.30.4

DROP TABLE IF EXISTS BOOKS_AUD;
CREATE TABLE BOOKS_AUD (
                           EVENT_ID INT(11) NOT NULL AUTO_INCREMENT,
                           EVENT_DATE DATETIME NOT NULL,
                           EVENT_TYPE VARCHAR(10) DEFAULT NULL,
                           BOOK_ID INT(11) NOT NULL,
                           OLD_TITLE VARCHAR(20),
                           NEW_TITLE VARCHAR(20),
                           OLD_PUBLICATION_YEAR INT(11),
                           NEW_PUBLICATION_YEAR INT(11),
                           OLD_BESTSELLER BOOLEAN,
                           NEW_BESTSELLER BOOLEAN,
                           PRIMARY KEY (EVENT_ID)
);

DELIMITER $$
CREATE TRIGGER BOOKS_INSERT AFTER INSERT ON BOOKS
    FOR EACH ROW
BEGIN
    INSERT INTO BOOKS_AUD(EVENT_DATE, EVENT_TYPE, BOOK_ID, NEW_TITLE, NEW_PUBLICATION_YEAR)
        VALUE (CURTIME(), 'INSERT', NEW.BOOK_ID, NEW.TITLE, NEW.PUBYEAR);
END $$

    DELIMITER ;

INSERT INTO BOOKS(BOOK_ID, TITLE, PUBYEAR, BESTSELLERS)
VALUES(6, 'Old Man And The Sea', 1956, 0);
COMMIT ;

SELECT * FROM BOOKS;

DELIMITER $$
CREATE TRIGGER BOOKS_DELETE AFTER DELETE ON BOOKS
    FOR EACH ROW
BEGIN
    INSERT INTO BOOKS_AUD(EVENT_DATE, EVENT_TYPE, BOOK_ID)
        VALUE (CURTIME(), 'DELETE', OLD.BOOK_ID);
END $$
    DELIMITER ;

DELETE FROM BOOKS WHERE BOOK_ID = 6;
COMMIT ;

SELECT * FROM BOOKS_AUD;

DELIMITER $$
CREATE TRIGGER BOOKS_UPDATE AFTER UPDATE ON BOOKS
    FOR EACH ROW
BEGIN
    INSERT INTO BOOKS_AUD (EVENT_DATE, EVENT_TYPE, BOOK_ID, NEW_TITLE, NEW_PUBLICATION_YEAR,
                           NEW_BESTSELLER, OLD_TITLE, OLD_PUBLICATION_YEAR, OLD_BESTSELLER)
        VALUE(CURTIME(), 'UPDATE', OLD.BOOK_ID, NEW.TITLE, NEW.PUBYEAR,
                  NEW.BESTSELLERS, OLD.TITLE, OLD.PUBYEAR,
                  OLD.BESTSELLERS);
END $$
    DELIMITER ;

UPDATE BOOKS SET PUBYEAR = 1999
WHERE BOOK_ID = 1;
COMMIT ;

SELECT * FROM BOOKS_AUD;

SELECT * FROM READERS;

DROP TABLE IF EXISTS READERS_AUD;
CREATE TABLE READERS_AUD (
                             EVENT_ID INT(11) NOT NULL AUTO_INCREMENT,
                             EVENT_DATE DATETIME NOT NULL,
                             EVENT_TYPE VARCHAR(10) DEFAULT NULL,
                             READER_ID INT(11) NOT NULL,
                             OLD_FIRSTNAME VARCHAR(50),
                             NEW_FIRSTNAME VARCHAR(50),
                             OLD_LASTNAME VARCHAR(50),
                             NEW_LASTNAME VARCHAR(50),
                             OLD_PESELID VARCHAR(11),
                             NEW_PESELID VARCHAR(11),
                             OLD_STATUS VARCHAR(40),
                             NEW_STATUS VARCHAR(40),
                             PRIMARY KEY (EVENT_ID)
);


DELIMITER $$
CREATE TRIGGER READERS_INSERT AFTER INSERT ON READERS
    FOR EACH ROW
BEGIN
    INSERT INTO READERS_AUD(EVENT_DATE, EVENT_TYPE, READER_ID,
                            NEW_FIRSTNAME, NEW_LASTNAME, NEW_PESELID,
                            NEW_STATUS)
        VALUE (CURTIME(), 'INSERT', NEW.READER_ID, NEW.FIRSTNAME, NEW.LASTNAME,
                 NEW.PESELID, NEW.VIP_LEVEL);
END $$

    DELIMITER ;

INSERT INTO READERS(READER_ID, FIRSTNAME, LASTNAME, PESELID, VIP_LEVEL)
VALUES(10, 'John', 'Cena', '01234567891', 'Standard customer');
COMMIT ;


DELIMITER $$
CREATE TRIGGER READERS_DELETE AFTER DELETE ON READERS
    FOR EACH ROW
BEGIN
    INSERT INTO READERS_AUD(EVENT_DATE, EVENT_TYPE, READER_ID)
        VALUE (CURTIME(), 'DELETE', OLD.READER_ID);
END $$
    DELIMITER ;

DELETE FROM READERS WHERE READER_ID = 10;
COMMIT ;

SELECT * FROM READERS_AUD;

DELIMITER $$
CREATE TRIGGER READERS_UPDATE AFTER UPDATE ON READERS
    FOR EACH ROW
BEGIN
    INSERT INTO READERS_AUD (EVENT_DATE, EVENT_TYPE, READER_ID, NEW_FIRSTNAME, NEW_LASTNAME,
                             NEW_PESELID, NEW_STATUS, OLD_FIRSTNAME, OLD_LASTNAME,
                             OLD_PESELID, OLD_STATUS)
        VALUE(CURTIME(), 'UPDATE', OLD.READER_ID, NEW.FIRSTNAME, NEW.LASTNAME,
                  NEW.PESELID, NEW.VIP_LEVEL, OLD.FIRSTNAME, OLD.LASTNAME,
                  OLD.PESELID, OLD.VIP_LEVEL);
END $$
    DELIMITER ;

UPDATE READERS SET VIP_LEVEL = 'Platinum'
WHERE READER_ID = 3;
COMMIT ;

SELECT * FROM READERS_AUD;
-- EX.30.5

DROP TABLE IF EXISTS STATS;
CREATE TABLE STATS (
                       STAT_ID INT(11) AUTO_INCREMENT PRIMARY KEY,
                       STAT_DATE DATETIME NOT NULL,
                       STAT VARCHAR(20) NOT NULL,
                       VALUE INT(11) NOT NULL
);


DROP VIEW IF EXISTS BESTSELLERS_COUNT;
CREATE VIEW BESTSELLERS_COUNT AS
SELECT COUNT(*) AS BESTSELLERS FROM BOOKS WHERE BESTSELLERS = 1;

SELECT * FROM BESTSELLERS_COUNT;

DROP PROCEDURE IF EXISTS UpdateStats;
DELIMITER $$
CREATE PROCEDURE UpdateStats()
BEGIN
CALL UpdateBestsellers();
INSERT INTO STATS(STAT_DATE, STAT, VALUE) VALUES (CURTIME(), 'BESTSELLER', (SELECT * FROM BESTSELLERS_COUNT));
END $$
DELIMITER ;

DROP EVENT IF EXISTS UPDATE_BESTSELLERS;
USE KODILLA_COURSE;
CREATE EVENT UPDATE_BESTSELLERS
    ON SCHEDULE EVERY 1 MINUTE
    DO CALL UpdateStats();

SELECT * FROM STATS;